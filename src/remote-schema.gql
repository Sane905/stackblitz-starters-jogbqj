"""
Autogenerated input type of AcceptEmployeeSupport
"""
input AcceptEmployeeSupportInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeUid: String!
}

enum AcceptFirstVisit {
  FalseWithCode
  FalseWithoutCode
  TrueWithCode
}

enum AccountKind {
  Curon
  Helpo
  Kddi
}

"""
Autogenerated input type of ActivateChangeEmail
"""
input ActivateChangeEmailInput {
  changeEmailUid: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type AgoraRoom {
  appId: String!
  createdAt: ISO8601DateTime!
  uid: ID!
}

type AgoraRoomParticipant {
  createdAt: ISO8601DateTime!
  credential: String!
  roomUid: ID!
  sessionUid: ID!
  userUid: ID!
}

type AllianceCampaign {
  description: String!
  discountCategory: DiscountCategory!
  discountPrice: String!
  name: String!
  serviceCode: String!
  useLimitPerPatient: Int!
}

type Announcement {
  body: String!
  sendAt: ISO8601DateTime!
  title: String!
  transitionApplicationUrl: String
  uid: String!
}

type Answer {
  alertValues: String
  createdAt: ISO8601DateTime!
  description: String!
  expectedValues: String
  image: String
  index: Int
  questionType: Int!
  questionUid: String
  questionnaireAnswerUid: String
  required: Boolean!
  uid: String!
  updatedAt: ISO8601DateTime!
  value: String
}

input AnswerAttributes {
  index: Int!
  media: Upload
  questionUid: String!
  value: String
}

"""
Autogenerated input type of ApplyAllianceCampaign
"""
input ApplyAllianceCampaignInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: JSON!
}

"""
Autogenerated input type of ApplyPasswordRegistration
"""
input ApplyPasswordRegistrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

type AreaTag {
  index: Int!
  name: String
  prefecture: Prefecture
  prefectureId: String
  slug: String!
  uid: String!
}

type AuthCredential {
  accountUid: String!
  authToken: String!
}

"""
Autogenerated input type of Authorization
"""
input AuthorizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Authorization.
"""
type AuthorizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  redirectUrl: String!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type BusinessHourInfo {
  comment: String
  irregularDays: [BusinessHourIrregularDay!]
  repeatCycles: [BusinessHourRepeatCycle!]!
  uid: ID!
}

type BusinessHourIrregularDay {
  date: ISO8601DateTime!
  opened: Boolean!
  timeRanges: [BusinessHourIrregularDayTimeRange!]
  uid: ID!
}

type BusinessHourIrregularDayTimeRange {
  closedAt: ISO8601DateTime!
  openedAt: ISO8601DateTime!
  uid: ID!
}

type BusinessHourRepeatCycle {
  dayOfWeek: DayOfWeek!
  repeatType: Repeat!
  timeRanges: [BusinessHourTimeRange!]!
  uid: ID!
}

type BusinessHourTimeRange {
  closedAt: ISO8601DateTime!
  openedAt: ISO8601DateTime!
  uid: ID!
}

enum CardCategory {
  Debit
  Other
  Prepaid
}

"""
Autogenerated input type of CertAuthory
"""
input CertAuthoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CertAuthory.
"""
type CertAuthoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userPermitUrl: String!
}

"""
Autogenerated input type of ChangeEmail
"""
input ChangeEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated input type of ChangePassword
"""
input ChangePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String!
  password: String!
}

"""
Autogenerated input type of ChangePasswordWithToken
"""
input ChangePasswordWithTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  token: String!
}

type Charge {
  amount: BigInt
  content: ChargeContent
  description: String
  paidAt: ISO8601DateTime
  price: BigInt
  reservation: Boolean
  taxedPrice: BigInt
  uid: String!
}

type ChargeContent {
  description: String
  diseaseUid: String
  identifier: Identifier
  uid: String!
}

type Clinic {
  availableToday: Boolean!
  building: String
  canConsultCovid: Boolean!
  city: String
  clinicSearchableTags: [ClinicSearchableTag!]!
  district: String
  electronicPrescriptionAvailable: Boolean!
  email: String!
  lat: Float
  lng: Float
  menus: [Menu!]!
  name: String!
  postal: String
  prefecture: String
  publicPhone: String
  publicProfile: PublicProfile
  reservable: Boolean!
  suspended: Boolean
  uid: ID!
  url: String
  videoCallProvider: VideoCallProvider!
}

"""
ClinicCollection type
"""
type ClinicCollection {
  """
  A collection of paginated ClinicCollection
  """
  collection: [Clinic!]!

  """
  Pagination Metadata for navigating the Pagination
  """
  metadata: CollectionMetadata!
}

"""
The connection type for Clinic.
"""
type ClinicConnection {
  """
  A list of edges.
  """
  edges: [ClinicEdge]

  """
  A list of nodes.
  """
  nodes: [Clinic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ClinicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Clinic
}

type ClinicSearchableTag {
  departmentCategories: [DepartmentCategory!]
  name: String!
  slug: String!
  uid: String!
}

type CollectionMetadata {
  """
  Current Page of loaded data
  """
  currentPage: Int!

  """
  The number of items per page
  """
  limitValue: Int!

  """
  The total number of items to be paginated
  """
  totalCount: Int!

  """
  The total number of pages in the pagination
  """
  totalPages: Int!
}

"""
Autogenerated input type of ConfirmCompletion
"""
input ConfirmCompletionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated input type of ConfirmVideoCallLog
"""
input ConfirmVideoCallLogInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeUid: String!
  notificationKind: VideoCallNotificationKind!
}

"""
Autogenerated input type of ConvertClientAccount
"""
input ConvertClientAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  uid: String!
}

"""
Autogenerated input type of CreateAccountCreditCard
"""
input CreateAccountCreditCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stripeToken: String
  token: String
}

"""
Autogenerated return type of CreateAccountCreditCard.
"""
type CreateAccountCreditCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  creditCard: PatientCreditCard
}

"""
Autogenerated input type of CreateEmail
"""
input CreateEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated input type of CreateFreeChatMessage
"""
input CreateFreeChatMessageInput {
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeUid: String!
  media: Upload
}

"""
Autogenerated input type of CreatePassword
"""
input CreatePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  token: String!
}

"""
Autogenerated input type of CreatePatientAccount
"""
input CreatePatientAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated input type of CreatePatientAuth
"""
input CreatePatientAuthInput {
  accountKind: AccountKind!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: String
}

"""
Autogenerated return type of CreatePatientAuth.
"""
type CreatePatientAuthPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: String!
}

"""
Autogenerated input type of CreatePatientContacts
"""
input CreatePatientContactsInput {
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contactType: String!
  email: String!
  name: String!
  phone: String!
  questionType: String!
  sender: String!
}

"""
Autogenerated input type of CreatePatientProfile
"""
input CreatePatientProfileInput {
  avatar: Upload
  birthday: ISO8601Date!
  building: String
  city: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  district: String!
  firstname: String!
  firstnameJ: String!
  gender: Gender!
  lastname: String!
  lastnameJ: String!
  phone: String!
  postal: String!
  prefecture: String!
}

"""
Autogenerated return type of CreatePatientProfile.
"""
type CreatePatientProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  profile: Profile
}

"""
Autogenerated input type of CreatePatientSignInToken
"""
input CreatePatientSignInTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePatientSignInToken.
"""
type CreatePatientSignInTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated input type of CreateQuestionnaireAnswer
"""
input CreateQuestionnaireAnswerInput {
  answers: [AnswerAttributes!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated input type of CreateReservation
"""
input CreateReservationInput {
  auPayTransactionId: String
  cardSeq: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerPharmacyUid: String
  endDatetime: String!
  episodeUid: String!
  insuranceCovered: Boolean
  menuUid: String!
  oemClientCode: String
  patientUid: String!
  pharmacyUid: String
  reason: String
  requestedElectronicPrescription: Boolean
  startDatetime: String!
  stripePaymentMethodId: ID
}

"""
Autogenerated input type of CreateReservationWithoutTime
"""
input CreateReservationWithoutTimeInput {
  auPayTransactionId: String
  cardSeq: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerPharmacyUid: String
  doctorVisitUid: String!
  insuranceCovered: Boolean
  oemClientCode: String
  pharmacyUid: String
  reason: String
  requestedElectronicPrescription: Boolean
  stripePaymentMethodId: ID
}

"""
Autogenerated input type of CreateRtcChannelTokenForRoom
"""
input CreateRtcChannelTokenForRoomInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated return type of CreateRtcChannelTokenForRoom.
"""
type CreateRtcChannelTokenForRoomPayload {
  authToken: RtcToken!
  channel: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateRtcTokenForNotification
"""
input CreateRtcTokenForNotificationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateTrackingData
"""
input CreateTrackingDataInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: JSON!
}

type CreditCard {
  brand: String
  cardName: String
  cardNo: String
  cardSeq: Int
  cardType: CardCategory
  expiry: String
}

type DateVacancy {
  date: ISO8601Date!
  vacancy: Int!
}

enum DayOfWeek {
  Friday
  Holiday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

"""
Autogenerated input type of DeleteClientAccount
"""
input DeleteClientAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteCreditCard
"""
input DeleteCreditCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stripePaymentMethodId: ID
}

enum DeliveryCategory {
  FreeInputFee
  NotChargeDeliveryFee
  PharmacyInternalDelivery
  Pickup
  RegularMail
  Takkyubin
  TakkyubinCompact
}

enum DeliveryDestination {
  ToPatient
  ToPharmacy
}

type DeliveryRecord {
  createdAt: ISO8601DateTime!
  deliveryType: DeliveryCategory
  pharmacyVisitUid: String
  uid: String!
  updatedAt: ISO8601DateTime!
}

type DeliveryRequest {
  deliveryType: DeliveryCategory
  uid: String!
  yamatoDeliveryRequest: YamatoDeliveryRequest
}

type Department {
  name: String
  uid: String!
}

type DepartmentCategory {
  name: String
  slug: String!
  uid: String!
}

"""
Autogenerated input type of DestroyPatientAccount
"""
input DestroyPatientAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Discount {
  amount: Int
  content: DiscountContent!
  description: String
  price: Int
  uid: String!
}

enum DiscountCategory {
  FullDiscount
  NormalDiscount
  UsageFeeDiscount
}

type DiscountContent {
  uid: String!
}

type Doctor {
  createdAt: ISO8601DateTime
  currentClinicUid: String
  email: String
  privilegeType: Int
  profile: Profile
  uid: ID!
}

type DoctorVisit {
  canceledAt: ISO8601DateTime
  comment: String
  completionConfirmed: Boolean!
  createdAt: ISO8601DateTime!
  deliveryDestinationType: DeliveryDestination
  displayOnKoalaWeb: Boolean!
  electronicPrescription: ElectronicPrescription
  electronicPrescriptionPatientRequest: ElectronicPrescriptionPatientRequest
  episode: Episode
  episodeUid: String
  examineType: ExamineCategory
  executedActions: [ExaminationNoticeKind!]!

  """
  金額変更やチャージバックを除いた初回決済日時
  """
  firstPaidAt: ISO8601DateTime
  index: Int
  instruction: String
  insuranceCardImageUrl: String
  insuranceCovered: Boolean
  medicalExaminationAction: MedicalExaminationAction
  medicalStatus: MedicalStatus
  menu: Menu
  menuUid: String
  notifyJoinVideoCallRoom: Boolean!
  passed: Boolean!
  patientSelectedPharmacy: Pharmacy
  payment: Payment
  paymentFlow: PaymentFlow
  pharmacy: Pharmacy
  pharmacyUid: String
  pharmacyVisit: PharmacyVisit
  prescriptionDelivery: PrescriptionDelivery
  prescriptionType: PrescriptionKind
  proceedToSettlement: Boolean!
  questionnaire: Questionnaire
  questionnaireAnswer: QuestionnaireAnswer
  questionnaireUids: String
  remindAnswerQuestionnaire: Boolean!
  remindMakeReservation: Boolean!
  reservation: Reservation
  reservations: [Reservation!]!
  shouldRemindToReceivePrescription: Boolean!
  showMedicineReceive: Boolean!
  uid: String!
  updatedAt: ISO8601DateTime!
  usageNumber: String!
  videoCallExecuted: Boolean
  visitType: VisitCategory!
}

type ElectronicPrescription {
  electronicPrescriptionNumber: String!
  uid: String!
}

type ElectronicPrescriptionPatientRequest {
  requestedElectronicPrescription: Boolean!
  uid: String!
}

"""
Autogenerated input type of EmailResendConfirm
"""
input EmailResendConfirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

type EmployeeSupport {
  createdAt: ISO8601DateTime!
  employmentStatus: EmploymentStatus
  episodeUid: String!
  notes: [Note!]!
  uid: String!
  updatedAt: ISO8601DateTime!
}

type EmploymentStatus {
  breakTime: String
  businessTrip: String
  commuteMethod: String
  commuteMethodDetail: String
  commuteTime: String
  createdAt: ISO8601DateTime!
  jobDescription: String
  jobDescriptionDetail: String
  jobTitle: String
  overtimeWork: String
  uid: String!
  updatedAt: ISO8601DateTime!
  workEndTime: String
  workStartTime: String
  workingPattern: String
  workingPatternDetail: String
}

type Episode {
  clinic: Clinic
  comment: String
  doctorVisits: [DoctorVisit!]!
  freeChatRead: Boolean!
  freeChatStatus: FreeChatStatus!
  menu: Menu
  patient: Patient
  patientUid: String
  timeReservationAvailable: Boolean!
  uid: String!
}

type ExaminationNotice {
  iconKind: IconKind!
  kind: ExaminationNoticeKind!
  notifiedAt: ISO8601DateTime!
  screenKind: ScreenKind!
  screenUid: String
  subTitle: String
  title: String!
  uid: String!
}

enum ExaminationNoticeKind {
  AnswerMedicalQuestionnaire
  ApproachingAnswerMedicalQuestionnaire
  ApproachingExaminationInVideoRoom
  CanceledCanNextExaminationApplication
  ClinicRequestEmployeeSupport
  ClinicRequestRebook
  ClinicSendPrescription
  CompletedNextMedicalExaminationApply
  ConfirmationOfPayment
  CouldNotSettlement
  DoctorAlreadyInVideoRoom
  DoneOfPayment
  ExaminationCanceled
  FirstNoNeedAnswerMedicalQuestionnaire
  FirstReservation
  HaveContactFromClinic
  NoNeedAnswerMedicalQuestionnaire
  NonSettlementCompleted
  NonSettlementCompletedAndCanNext
  PaymentCompletedAtPharmacy
  ReadyToHandOverMedicineAtPharmacy
  ReceivingTheMedicineFromMedicineDelivery
  RemindClinicSendPrescription
  RemindMakeReservation
  TestVideoCall
  WillStartSoonOnlineMedicationInstruction
  WillStartSoonVideo
}

enum ExamineCategory {
  Both
  InPerson
  Telemedicine
}

"""
Autogenerated input type of FetchNichoRedirectUrl
"""
input FetchNichoRedirectUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  patientUid: String!
  pharmacyVisitUid: String!
}

"""
Autogenerated return type of FetchNichoRedirectUrl.
"""
type FetchNichoRedirectUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  redirectUrl: String
}

type FreeChatMessage {
  body: String
  createdAt: ISO8601DateTime!
  deletedAt: String
  fileName: String
  mediaUrl: String
  sender: String
  senderAvatarUri: String
  senderName: String
  type: FreeChatMessageCategory!
  uid: String!
}

enum FreeChatMessageCategory {
  ChatImage
  ChatPdf
  ChatStatusUpdateEventMessage
  ChatText
}

enum FreeChatStatus {
  Close
  Open
}

enum Gender {
  Female
  Male
}

"""
Autogenerated input type of GenerateOidcParams
"""
input GenerateOidcParamsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateOidcParams.
"""
type GenerateOidcParamsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
  nonce: String!
  state: String!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

enum IconKind {
  Card
  Chat
  ExclamationPoint
  MedicalQuestionnaire
  Medicine
  Video
}

enum Identifier {
  CuronAppFee
  DeprecatedAppChargeCashOnDeliveryFee
  DeprecatedAppChargeExternalDeliveryFee
  DeprecatedAppChargeNoDeliveryFee
  DeprecatedAppChargeTakkyubin
  DeprecatedAppChargeTakkyubinCompact
  FreeInputFee
  InvoiceTakkyubinCompactFee
  InvoiceTakkyubinFee
  Refund
  RegularMailFee
  RenewalCharge
  TakkyubinCompactBoxFee
  TakkyubinCompactFee
  TakkyubinFee
  UpdateReservationFee
}

"""
初回のプロフィール登録時にフォームを Autofill するための情報を返却します。
（LINEログイン等でユーザーの属性情報が得られている場合に値が返却されます。）
"""
type InitialProfileSuggestion {
  """
  アイコン画像（外部URL）
  """
  avatar: String

  """
  誕生日
  """
  birthday: ISO8601Date

  """
  名
  """
  firstname: String

  """
  名（カナ）
  """
  firstnameJ: String

  """
  性別
  """
  gender: Gender

  """
  姓
  """
  lastname: String

  """
  姓（カナ）
  """
  lastnameJ: String

  """
  電話番号
  """
  phone: String
}

"""
Represents untyped JSON
"""
scalar JSON

"""
Autogenerated input type of JoinClinic
"""
input JoinClinicInput {
  auPayTransactionId: String
  cardSeq: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clinicUid: String!
  customerPharmacyUid: String
  endDatetime: String
  insuranceCardImage: Upload!
  joinReason: String
  menuUid: String
  oemClientCode: String
  patientRegistrationCardNumber: String!
  patientUid: String!
  pharmacyUid: String
  requestedElectronicPrescription: Boolean
  returnVisitAnswer: Boolean
  selectedParts: JSON!
  startDatetime: String
  stripePaymentMethodId: ID
  visitHistoryForSymptoms: VisitHistoryForSymptoms!
  visitType: String!
}

"""
Autogenerated input type of JoinRoom
"""
input JoinRoomInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated return type of JoinRoom.
"""
type JoinRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  participant: RoomParticipant!
  room: Room!
}

"""
Autogenerated input type of JoinRoomWithNewFlow
"""
input JoinRoomWithNewFlowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated return type of JoinRoomWithNewFlow.
"""
type JoinRoomWithNewFlowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

type KddiAccount {
  isAuWellness: Boolean!
  uid: String!
}

"""
Autogenerated input type of MarkExaminationNoticeAsExecuted
"""
input MarkExaminationNoticeAsExecutedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  examinationNoticeKind: ExaminationNoticeKind!
  screenUid: String!
}

type MedicalExaminationAction {
  additionalNoticeKind: MedicalExaminationActionAdditionalNoticeKind
  currentStatus: MedicalExaminationActionStatus!
  examinationNoticeKind: ExaminationNoticeKind
  nextActionLabel: String
  step: MedicalExaminationActionStep!
}

enum MedicalExaminationActionAdditionalNoticeKind {
  RemindMakeReservation
}

enum MedicalExaminationActionStatus {
  Alert
  Done
  Notice
  Wait
}

enum MedicalExaminationActionStep {
  Entry
  Examination
  Medicine
  Payment
  Questionnaire
}

enum MedicalStatus {
  AfterJoin
  CallPend
  ChargeConfirm
  ChargePend
  Completed
  ImpossibleStl
  MedPend
  Muted
  NdvSetting
  NoPend
  QaPend
  QuestionnaireSetting
  RcvPend
  StlCollection
  StlPend
  SvcPend
  Taking
  ToBeApproved
}

type Menu {
  availableToday: Boolean!
  description: String
  firstVisit: Boolean
  name: String
  price: Int
  reservedByType: MenuReserveCategory!
  skipSettlementOnFirstUse: Boolean!
  uid: String!
  withReservation: Boolean!
}

enum MenuReserveCategory {
  Doctor
  NoNeedForReservation
  Patient
}

type Mutation {
  auAuthorization(
    """
    Parameters for Authorization
    """
    input: AuthorizationInput!
  ): AuthorizationPayload
  auPayCertAuthory(
    """
    Parameters for CertAuthory
    """
    input: CertAuthoryInput!
  ): CertAuthoryPayload
  createFreeChatMessage(
    """
    Parameters for CreateFreeChatMessage
    """
    input: CreateFreeChatMessageInput!
  ): Boolean
  createPatientAccount(
    """
    Parameters for CreatePatientAccount
    """
    input: CreatePatientAccountInput!
  ): PatientAccount
  createPatientContacts(
    """
    Parameters for CreatePatientContacts
    """
    input: CreatePatientContactsInput!
  ): Boolean
  createPatientSignInToken(
    """
    Parameters for CreatePatientSignInToken
    """
    input: CreatePatientSignInTokenInput!
  ): CreatePatientSignInTokenPayload
  destroyPatientAccount(
    """
    Parameters for DestroyPatientAccount
    """
    input: DestroyPatientAccountInput!
  ): Boolean
  developmentCreatePatientAuth(
    """
    Parameters for CreatePatientAuth
    """
    input: CreatePatientAuthInput!
  ): CreatePatientAuthPayload
  generateOidcParams(
    """
    Parameters for GenerateOidcParams
    """
    input: GenerateOidcParamsInput!
  ): GenerateOidcParamsPayload!
  kddiUpdateBillingType(
    """
    Parameters for UpdateBilling
    """
    input: UpdateBillingInput!
  ): Boolean
  patientSignIn(
    """
    Parameters for PatientSignIn
    """
    input: PatientSignInInput!
  ): PatientAccount
  patientSignInForToken(
    """
    Parameters for PatientSignInForToken
    """
    input: PatientSignInForTokenInput!
  ): AuthCredential
  patientSignInWithIdToken(
    """
    Parameters for PatientSignInWithIdToken
    """
    input: PatientSignInWithIdTokenInput!
  ): AuthCredential
  patientSignInWithToken(
    """
    Parameters for PatientSignInWithToken
    """
    input: PatientSignInWithTokenInput!
  ): PatientAccount
  patientSignOut(
    """
    Parameters for PatientSignOut
    """
    input: PatientSignOutInput!
  ): Boolean
  patientVerify(
    """
    Parameters for PatientVerify
    """
    input: PatientVerifyInput!
  ): PatientAccount
  patientsAcceptEmployeeSupport(
    """
    Parameters for AcceptEmployeeSupport
    """
    input: AcceptEmployeeSupportInput!
  ): Boolean
  patientsActivateChangeEmail(
    """
    Parameters for ActivateChangeEmail
    """
    input: ActivateChangeEmailInput!
  ): PatientAccount
  patientsApplyAllianceCampaign(
    """
    Parameters for ApplyAllianceCampaign
    """
    input: ApplyAllianceCampaignInput!
  ): AllianceCampaign
  patientsApplyPasswordRegistration(
    """
    Parameters for ApplyPasswordRegistration
    """
    input: ApplyPasswordRegistrationInput!
  ): Boolean
  patientsChangeEmail(
    """
    Parameters for ChangeEmail
    """
    input: ChangeEmailInput!
  ): PatientAccount
  patientsChangePassword(
    """
    Parameters for ChangePassword
    """
    input: ChangePasswordInput!
  ): Boolean
  patientsChangePasswordWithToken(
    """
    Parameters for ChangePasswordWithToken
    """
    input: ChangePasswordWithTokenInput!
  ): Boolean
  patientsConvertClientAccount(
    """
    Parameters for ConvertClientAccount
    """
    input: ConvertClientAccountInput!
  ): PatientAccount
  patientsCreateAccountCreditCard(
    """
    Parameters for CreateAccountCreditCard
    """
    input: CreateAccountCreditCardInput!
  ): CreateAccountCreditCardPayload
  patientsCreateEmail(
    """
    Parameters for CreateEmail
    """
    input: CreateEmailInput!
  ): PatientAccount
  patientsCreatePassword(
    """
    Parameters for CreatePassword
    """
    input: CreatePasswordInput!
  ): Boolean
  patientsCreatePatientProfile(
    """
    Parameters for CreatePatientProfile
    """
    input: CreatePatientProfileInput!
  ): CreatePatientProfilePayload
  patientsCreateRtcTokenForNotification(
    """
    Parameters for CreateRtcTokenForNotification
    """
    input: CreateRtcTokenForNotificationInput!
  ): RtcToken
  patientsCreateTrackingData(
    """
    Parameters for CreateTrackingData
    """
    input: CreateTrackingDataInput!
  ): Boolean
  patientsDeleteClientAccount(
    """
    Parameters for DeleteClientAccount
    """
    input: DeleteClientAccountInput!
  ): Boolean
  patientsDeleteCreditCard(
    """
    Parameters for DeleteCreditCard
    """
    input: DeleteCreditCardInput!
  ): Boolean
  patientsEmailResendConfirm(
    """
    Parameters for EmailResendConfirm
    """
    input: EmailResendConfirmInput!
  ): Boolean
  patientsEpisodesConfirmCompletion(
    """
    Parameters for ConfirmCompletion
    """
    input: ConfirmCompletionInput!
  ): DoctorVisit
  patientsEpisodesConfirmVideoCallLog(
    """
    Parameters for ConfirmVideoCallLog
    """
    input: ConfirmVideoCallLogInput!
  ): Boolean
  patientsEpisodesCreateQuestionnaireAnswer(
    """
    Parameters for CreateQuestionnaireAnswer
    """
    input: CreateQuestionnaireAnswerInput!
  ): QuestionnaireAnswer
  patientsEpisodesCreateReservation(
    """
    Parameters for CreateReservation
    """
    input: CreateReservationInput!
  ): DoctorVisit
  patientsEpisodesCreateReservationWithoutTime(
    """
    Parameters for CreateReservationWithoutTime
    """
    input: CreateReservationWithoutTimeInput!
  ): DoctorVisit
  patientsEpisodesCreateRtcChannelTokenForRoom(
    """
    Parameters for CreateRtcChannelTokenForRoom
    """
    input: CreateRtcChannelTokenForRoomInput!
  ): CreateRtcChannelTokenForRoomPayload
  patientsEpisodesJoinRoom(
    """
    Parameters for JoinRoom
    """
    input: JoinRoomInput!
  ): JoinRoomPayload
  patientsEpisodesJoinRoomWithNewFlow(
    """
    Parameters for JoinRoomWithNewFlow
    """
    input: JoinRoomWithNewFlowInput!
  ): JoinRoomWithNewFlowPayload
  patientsEpisodesReadyToReserveNextVisit(
    """
    Parameters for ReadyToReserveNextVisit
    """
    input: ReadyToReserveNextVisitInput!
  ): DoctorVisit
  patientsEpisodesReceivedMedicine(
    """
    Parameters for ReceivedMedicine
    """
    input: ReceivedMedicineInput!
  ): DoctorVisit
  patientsEpisodesUpdateInsuranceCard(
    """
    Parameters for UpdateInsuranceCard
    """
    input: UpdateInsuranceCardInput!
  ): DoctorVisit
  patientsEpisodesUpdatePharmacy(
    """
    Parameters for UpdatePharmacy
    """
    input: UpdatePharmacyInput!
  ): DoctorVisit
  patientsEpisodesUpdateReservation(
    """
    Parameters for UpdateReservation
    """
    input: UpdateReservationInput!
  ): UpdateReservationPayload
  patientsJoinClinic(
    """
    Parameters for JoinClinic
    """
    input: JoinClinicInput!
  ): Episode
  patientsMarkExaminationNoticeAsExecuted(
    """
    Parameters for MarkExaminationNoticeAsExecuted
    """
    input: MarkExaminationNoticeAsExecutedInput!
  ): DoctorVisit
  patientsPharmacyVisitsFetchNichoRedirectUrl(
    """
    Parameters for FetchNichoRedirectUrl
    """
    input: FetchNichoRedirectUrlInput!
  ): FetchNichoRedirectUrlPayload
  patientsReadAnnouncement(
    """
    Parameters for ReadAnnouncement
    """
    input: ReadAnnouncementInput!
  ): Boolean
  patientsResetPassword(
    """
    Parameters for ResetPassword
    """
    input: ResetPasswordInput!
  ): Boolean
  patientsUpdateCanReceiveMarketingAnnouncement(
    """
    Parameters for UpdateCanReceiveMarketingAnnouncement
    """
    input: UpdateCanReceiveMarketingAnnouncementInput!
  ): PatientAccount
  patientsUpdateExaminationNotice(
    """
    Parameters for UpdateExaminationNotice
    """
    input: UpdateExaminationNoticeInput!
  ): Boolean
  patientsUpdateProfile(
    """
    Parameters for UpdateProfile
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload
  patientsUpdateTrackingDataSharingSetting(
    """
    Parameters for UpdateTrackingDataSharingSetting
    """
    input: UpdateTrackingDataSharingSettingInput!
  ): TrackingDataSharingSetting
  patientsUpdateUserDevice(
    """
    Parameters for UpdateUserDevice
    """
    input: UpdateUserDeviceInput!
  ): Boolean
  registerAllianceCampaignSession(
    """
    Parameters for RegisterAllianceCampaignSession
    """
    input: RegisterAllianceCampaignSessionInput!
  ): AllianceCampaign
}

type Note {
  clinicName: String!
  createdAt: ISO8601DateTime!
  employeeSupportUid: String!
  index: Int!
  name: String!
  noteItems: [NoteItem!]!
  organizationName: String!
  status: String!
  uid: String!
  updatedAt: ISO8601DateTime!
}

type NoteItem {
  createdAt: ISO8601DateTime!
  index: Int!
  noteUid: String!
  questionnaire: Questionnaire
  questionnaireAnswer: QuestionnaireAnswer
  requestedAt: ISO8601DateTime
  status: String!
  uid: String!
  updatedAt: ISO8601DateTime!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

enum PaidBy {
  AuPay
  CashOnDelivery
  Clinic
  CreditCard
  Jcom
}

type Patient {
  episodes: [Episode!]!
  profile: Profile
  uid: ID!
  userCode: String
}

type PatientAccount {
  accountKind: AccountKind
  allianceCampaigns: [AllianceCampaign!]!
  availableAllianceCampaigns: [AllianceCampaign!]!
  availableEmployeeSupport: Boolean!
  email: String
  initialProfileSuggestion: InitialProfileSuggestion
  kddiAccount: KddiAccount
  mainUserUid: String
  patients: [Patient!]!
  receiveMarketingAnnouncementRequest: Boolean!
  reservations: [Reservation!]!
  uid: ID!
  userDevices: [UserDevice!]!
}

type PatientCreditCard {
  brand: String!
  expMonth: Int!
  expYear: Int!
  last4: String!
  stripePaymentMethodId: ID!
}

"""
Autogenerated input type of PatientSignInForToken
"""
input PatientSignInForTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated input type of PatientSignIn
"""
input PatientSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated input type of PatientSignInWithIdToken
"""
input PatientSignInWithIdTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  idToken: String!
  oidcAuthenticationId: String!
}

"""
Autogenerated input type of PatientSignInWithToken
"""
input PatientSignInWithTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated input type of PatientSignOut
"""
input PatientSignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  vendorId: String
}

"""
Autogenerated input type of PatientVerify
"""
input PatientVerifyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  pinCode: String!
}

type Payment {
  amount: BigInt
  amountToBePaid: BigInt
  autoSettleFailedAt: ISO8601DateTime
  cardSeq: Int
  chargeAmount: BigInt
  chargeBackedAt: ISO8601DateTime
  chargeTotal: BigInt
  charges: [Charge!]!
  clinicDeliveryForDetail: BigInt
  clinicUid: String
  curonAppAmount: BigInt
  deliveryAssistantAmount: BigInt
  deliveryRequest: DeliveryRequest
  discounts: [Discount!]!
  doctorVisitUid: String
  hasReservationService: Boolean!
  insuranceCovered: Boolean
  insuranceRatio: Float
  medicalFeesScore: BigInt
  notChargeDeliveryFee: Boolean
  paidAt: ISO8601DateTime
  paidBy: PaidBy!
  patientUid: String
  paymentFlow: PaymentFlow
  prescriptionScoreTotal: BigInt
  prescriptionType: Int
  prescriptions: [Prescription!]!
  procedures: [Procedure!]!
  reservationAmount: BigInt
  settleFailedAt: ISO8601DateTime
  skipSettlement: Boolean
  status: PaymentStatus
  stripePaymentMethodId: ID
  subtotalBeforeCharge: BigInt
  uid: String!
  usageNumber: String!
}

enum PaymentFlow {
  Deprecated
  Normal
  Renewal
}

enum PaymentStatus {
  Created
  Failed
  Paid
  Refunded
  Updated
}

type Pharmacy {
  available: Boolean!
  building: String
  businessHourInfo: BusinessHourInfo
  city: String
  district: String
  electronicPrescriptionAvailable: Boolean!
  email: String
  fax: String
  isExternalPharmacy: Boolean!
  isFavorite: Boolean!
  isLinkedToNicho: Boolean!
  isStripeEnabled: Boolean!
  lat: Float
  lng: Float
  name: String!
  phone: String!
  postal: String
  prefecture: String
  uid: ID!
  url: String
  wellnessNo: String
  withGuidance: Boolean!
}

type PharmacyVisit {
  applicationCompletedAt: ISO8601DateTime
  deliveryRecord: DeliveryRecord
  isNichoTelemedGuide: Boolean!
  isUsingKddiWhcPharmacy: Boolean!
  medicineDispensedAt: ISO8601DateTime
  medicinePassedAt: ISO8601DateTime
  placeToReceiveService: PlaceToReceiveService
  referenceNumber: String
  reservationFinishedAt: ISO8601DateTime
  reservationStartedAt: ISO8601DateTime
  reserveRequired: Boolean!
  settlementRecords: [SettlementRecord!]!
  token: String
  uid: String!
  yamatoDeliveryId: String
}

enum PlaceToReceiveService {
  InHome
  InStore
}

type Point {
  x: Float!
  y: Float!
}

type Prefecture {
  id: String!
  name: String
  slug: String!
}

type Prescription {
  amount: Int
  content: PrescriptionContent!
  days: Int
  diseaseUid: String
  price: Int
  taxedPrice: Int
  uid: String!
  usage: String
}

type PrescriptionContent {
  name: String
  sellingUnit: String
  uid: String!
}

type PrescriptionDelivery {
  deliverTo: PrescriptionDeliveryDeliverTo!
  freeInputPharmacyProfile: String
  pharmacy: Pharmacy
  uid: ID!
}

enum PrescriptionDeliveryDeliverTo {
  FreeInputPharmacy
  PatientProfileAddress
  Pharmacy
}

enum PrescriptionKind {
  ElectronicPrescription
  External
  InHouse
  NoPrescription
}

type Procedure {
  amount: Int
  content: ProcedureContent!
  description: String
  diseaseUid: String
  price: Int
  uid: String!
}

type ProcedureContent {
  diseaseRelated: Boolean
  diseaseUid: String
  name: String
  uid: String!
}

type Profile {
  avatar: String
  birthday: ISO8601Date
  building: String
  city: String
  district: String
  firstname: String
  firstnameJ: String
  gender: Gender
  lastname: String
  lastnameJ: String
  patient: Patient
  phone: String
  postal: String
  prefecture: String
  streetAddress: StreetAddress
  uid: String!
}

type PublicProfile {
  acceptFirstVisit: AcceptFirstVisit!
  departments: [Department!]!
  description: String
  logoPublicUrl: String
  openingHour: String
  publicProfileCharges: [PublicProfileCharge!]
  uid: String!
}

type PublicProfileCharge {
  description: String
  price: String
  uid: String!
}

type Query {
  allSearchConditionsClinicSearch: [[String!]!]!
  announcements: [Announcement!]!
  areaTagBySlug(slug: String!): AreaTag!
  clinic(uid: String!): Clinic!
  clinicByCode(code: String!): Clinic!
  clinicSearchableTags: [ClinicSearchableTag!]!
  clinics(
    acceptFirstVisit: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    areaTagSlug: String
    availableDate: ISO8601Date

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    canConsultCovid: Boolean
    clinicSearchableTagSlug: String
    departmentCategorySlug: String
    electronicPrescriptionAvailable: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    latitude: Float
    longitude: Float
    name: String
    notNeedClinicCode: Boolean
    prefecture: String
  ): ClinicConnection!
  clinicsByWellnessNumber(wellnessNumber: String!): [Clinic!]!
  clinicsForPagination(
    acceptFirstVisit: Boolean
    areaTagSlug: String
    availableDate: ISO8601Date
    canConsultCovid: Boolean
    clinicSearchableTagSlug: String
    departmentCategorySlug: String
    electronicPrescriptionAvailable: Boolean
    latitude: Float
    limit: Int
    longitude: Float
    name: String
    notNeedClinicCode: Boolean
    page: Int
    prefecture: String
  ): ClinicCollection!
  clinicsSearch(
    acceptFirstVisit: Boolean
    areaTagSlug: String
    availableDate: ISO8601Date
    canConsultCovid: Boolean
    clinicSearchableTagSlug: String
    departmentCategorySlug: String
    electronicPrescriptionAvailable: Boolean
    latitude: Float
    longitude: Float
    name: String
    page: Int
    prefecture: String
  ): [Clinic!]! @deprecated(reason: "`clinics` を代わりに使用する")
  creditCardDetail(token: String!): CreditCard!
  currentDoctorVisit(episodeUid: String!): DoctorVisit!
  dateVacancies(fromDate: ISO8601Date!, menuUid: String!, toDate: ISO8601Date!): [DateVacancy!]!
  departmentCategories: [DepartmentCategory!]!
  departmentCategoryBySlug(slug: String!): DepartmentCategory!
  doctorVisit(doctorVisitUid: String!): DoctorVisit!
  employeeSupport: EmployeeSupport
  episode(episodeUid: String!): Episode!
  episodeReservation(episodeUid: String!): Reservation!
  examinationNotices: [ExaminationNotice!]!
  freeChatMessage(episodeUid: String!): [FreeChatMessage!]!
  holidayToday: Boolean!
  lastSelectedPharmacy: Pharmacy
  patientAccount: PatientAccount!
  patientCreditCard(stripePaymentMethodId: ID!): PatientCreditCard!
  patientCreditCards: [PatientCreditCard!]!
  pharmaciesByLocation(
    clinicUid: String!
    customerPharmacyUid: String
    electronicPrescriptionAvailable: Boolean
    latitude: Float!
    longitude: Float!
    name: String
    onlyGuidance: Boolean
  ): [Pharmacy!]!
  pharmaciesSearch(
    clinicUid: String
    electronicPrescriptionAvailable: Boolean
    getResults: Int
    latitude: Float
    longitude: Float
    name: String
    onlyGuidance: Boolean
    page: Int
    patientUid: String
    pharmacyHeadquarterUid: String
    prioritizeFavorite: Boolean
    searchType: String
  ): [Pharmacy!]!
  pharmacy(uid: String!): Pharmacy!
  pharmacyByWellnessNumber(wellnessNumber: String!): Pharmacy
  scheduleBlocks(fromDate: ISO8601Date!, menuUid: String!, toDate: ISO8601Date!): [ScheduleBlock!]!
  trackingData(
    from: ISO8601DateTime!
    names: JSON!
    showingPeriodUnit: Int!
    to: ISO8601DateTime!
  ): [TrackingData!]!
  trackingDataSharingSetting: TrackingDataSharingSetting
  unreadAnnouncementUids: [String!]!
  videoCallNotificationLogs: [VideoCallNotificationLog!]!
  zipAddress(postal: String!): ZipAddress!
}

type Question {
  description: String!
  index: Int
  options: [String!]
  questionType: Int!
  required: Boolean!
  uid: String!
}

type Questionnaire {
  questions: [Question!]!
  uid: String!
}

type QuestionnaireAnswer {
  answers: [Answer!]!
  createdAt: ISO8601DateTime!
  doctorVisit: DoctorVisit!
  respondentUid: String
  uid: String!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of ReadAnnouncement
"""
input ReadAnnouncementInput {
  announcementUid: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ReadyToReserveNextVisit
"""
input ReadyToReserveNextVisitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated input type of ReceivedMedicine
"""
input ReceivedMedicineInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
}

"""
Autogenerated input type of RegisterAllianceCampaignSession
"""
input RegisterAllianceCampaignSessionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: JSON!
}

enum Repeat {
  FifthWeek
  FirstWeek
  FourthWeek
  NoRepeat
  SecondWeek
  ThirdWeek
  Weekly
}

type ReservableSchedule {
  active: Boolean
  clinic: Clinic
  clinicUid: String
  createdAt: ISO8601DateTime!
  description: String
  doctor: Doctor
  doctorUid: String
  examineType: Int!
  name: String
  reservationDeadline: Int
  reservationType: Int!
  uid: ID!
  updatedAt: ISO8601DateTime!
  walkinStatus: Int
}

type Reservation {
  changeable: Boolean
  comment: String
  createdAt: ISO8601DateTime!
  doctorVisit: DoctorVisit
  endDatetime: ISO8601DateTime
  episodeUid: String
  menu: Menu
  patient: Patient!
  reservableSchedule: ReservableSchedule
  reservationDeadline: Int
  startDatetime: ISO8601DateTime
  status: ReservationStatus
  uid: ID!
  user: User
}

enum ReservationStatus {
  Canceled
  CarriedOut
  DeletedAccount
  Reserved
  TimePassed
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

union Room = AgoraRoom | SkywayRoom | SoraRoom

union RoomParticipant = AgoraRoomParticipant | SkywayRoomParticipant | SoraRoomParticipant

type RtcScope {
  type: String!
  value: String!
}

type RtcToken {
  expire: Int!
  scopes: [RtcScope!]!
  token: String!
  uid: String!
}

type ScheduleBlock {
  date: ISO8601Date!
  endTime: Time!
  startTime: Time!
  uid: ID!
  vacancy: Int
}

enum ScreenKind {
  DoctorVisit
  EmployeeSupport
  FreeChat
  MedicineDelivery
  Payment
  QuestionnaireEdit
  SearchClinic
  TestVideoRoom
  VideoRoom
}

type SettlementRecord {
  amount: BigInt!
  createdAt: ISO8601DateTime!
  failedAt: ISO8601DateTime
  insuranceCoveredAmount: BigInt!
  nonInsuranceCoveredAmount: BigInt!
  paidAt: ISO8601DateTime
  pharmacyVisitUid: String
  refundedAt: ISO8601DateTime
  uid: String!
  updatedAt: ISO8601DateTime!
}

type SkywayRoom {
  apiKey: String!
  uid: ID!
}

type SkywayRoomParticipant {
  credential: String!
  peerId: String!
  sessionUid: ID!
}

type SoraRoom {
  hostname: String!
  uid: ID!
}

type SoraRoomParticipant {
  credential: String!
  sessionUid: ID!
}

type StreetAddress {
  building: String
  city: String!
  district: String
  point: Point
  postal: String!
  prefecture: String!
  uid: String!
}

scalar Time

type TrackingData {
  dataType: String!
  valuesForRange: [ValuesForRange!]!
}

type TrackingDataSharingSetting {
  bloodGlucose: Boolean!
  bloodPressure: Boolean!
  bmi: Boolean!
  bodyFatPercentage: Boolean!
  floors: Boolean!
  sleepTime: Boolean!
  steps: Boolean!
  weight: Boolean!
}

"""
Autogenerated input type of UpdateBilling
"""
input UpdateBillingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCanReceiveMarketingAnnouncement
"""
input UpdateCanReceiveMarketingAnnouncementInput {
  canReceiveMarketingAnnouncement: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateExaminationNotice
"""
input UpdateExaminationNoticeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  examinationNoticeKind: ExaminationNoticeKind!
  screenUid: String!
}

"""
Autogenerated input type of UpdateInsuranceCard
"""
input UpdateInsuranceCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
  image: Upload!
}

"""
Autogenerated input type of UpdatePharmacy
"""
input UpdatePharmacyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  doctorVisitUid: String!
  pharmacyUid: String!
  requestedElectronicPrescription: Boolean
}

"""
Autogenerated input type of UpdateProfile
"""
input UpdateProfileInput {
  avatar: Upload
  birthday: ISO8601Date
  building: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  district: String
  firstname: String
  firstnameJ: String
  gender: Gender
  lastname: String
  lastnameJ: String
  patientUid: String!
  phone: String
  postal: String
  prefecture: String
}

"""
Autogenerated return type of UpdateProfile.
"""
type UpdateProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  profile: Profile
}

"""
Autogenerated input type of UpdateReservation
"""
input UpdateReservationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endDatetime: String!
  patientUid: String!
  reservationUid: String!
  startDatetime: String!
}

"""
Autogenerated return type of UpdateReservation.
"""
type UpdateReservationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reservation: Reservation
}

"""
Autogenerated input type of UpdateTrackingDataSharingSetting
"""
input UpdateTrackingDataSharingSettingInput {
  bloodGlucose: Boolean!
  bloodPressure: Boolean!
  bmi: Boolean!
  bodyFatPercentage: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  floors: Boolean!
  sleepTime: Boolean!
  steps: Boolean!
  weight: Boolean!
}

"""
Autogenerated input type of UpdateUserDevice
"""
input UpdateUserDeviceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  fcmToken: String!
  os: UserDeviceOsCategory!
  vendorId: String!
}

scalar Upload

type User {
  type: String!
  uid: ID!
}

type UserDevice {
  fcmToken: String
  os: UserDeviceOsCategory!
  uid: String!
  vendorId: String!
}

enum UserDeviceOsCategory {
  Android
  AndroidTV
  Web
  iOS
}

type ValuesForRange {
  beginningDateOfRange: String!
  value: Int!
}

enum VideoCallNotificationKind {
  ClinicRoomCall
  ClinicRoomTestCall
  PharmacyRoomCall
}

type VideoCallNotificationLog {
  calleeName: String
  createdAt: ISO8601DateTime!
  doctorVisitUid: String
  episodeUid: String
  notificationKind: VideoCallNotificationKind!
  patientUid: String!
  roomIconUrl: String!
  roomName: String
  uid: String!
}

enum VideoCallProvider {
  Agora
  Skyway
  Sora
}

enum VisitCategory {
  FirstVisit
  ReturnVisit
}

enum VisitHistoryForSymptoms {
  FirstTimeSymptoms
  NoAnswer
  SymptomsExamined
}

type YamatoDeliveryRequest {
  deliveryId: String
  uid: String!
}

type ZipAddress {
  city: String!
  district: String
  prefecture: String!
}
